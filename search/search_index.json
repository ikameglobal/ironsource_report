{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ironsource_report","title":"ironsource_report","text":"<p>This is library use to interactive with Ironsouce APIs</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Something</li> <li>Something else</li> </ul>"},{"location":"api/","title":"Modules","text":""},{"location":"api/#ironsource_report.ironsource_user_ad_revenue_reporting_api.AdRevenueMeasurements","title":"<code>AdRevenueMeasurements</code>","text":"<p>             Bases: <code>IronSourceClient</code></p> Detailed documentation for this API can be found at <p>ironSource Impression Level API</p> Source code in <code>ironsource_report/ironsource_user_ad_revenue_reporting_api.py</code> <pre><code>class AdRevenueMeasurements(IronSourceClient):\n\"\"\"\n    Detailed documentation for this API can be found at:\n        [ironSource Impression Level API](\n        https://developers.is.com/ironsource-mobile/air/ad-revenue-measurements/#step-1\n        )\n    \"\"\"\n\n    def __init__(self, api_credential: dict,\n                 status_retries: list[int] = STATUS_RETRIES,\n                 max_retries=5, retry_delay=1):\n\"\"\"\n        Args:\n            api_credential: API key(s) to use for the report\n            status_retries: A set of HTTP status codes that we should force a retry on\n            max_retries: Total number of retries to allow\n            retry_delay: Num of seconds sleep between attempts\n\n        Returns:\n            None\n\n        Doc Author:\n            mungvt@ikameglobal.com\n        \"\"\"\n        super().__init__(api_credential=api_credential, status_retries=status_retries, max_retries=max_retries,\n                         retry_delay=retry_delay)\n\n    def get_report(\n        self,\n        date: str = day_ago(1),\n        app_key: str = \"\",\n        **kwargs\n    ) -&gt; DataFrame:\n\"\"\"\n        Retrieve a report from the ironSource Impression Level Revenue Server-Side API.\n\n        Args:\n            date: YYYY-MM-DD (UTC Timezone)\n            app_key: Application Key (as seen on our platform)\n            **kwargs: Additional parameters to pass to the API\n\n        Returns:\n            A pandas DataFrame containing the report data.\n\n        Doc Author:\n            mungvt@ikameglobal.com\n        \"\"\"\n\n        params = {\n            \"appKey\": app_key,\n            \"date\": date,\n            **kwargs,\n        }\n\n        response = self.session.get(url=self.API_AD_REVENUE, params=params, headers=self._api_headers)\n        if response.status_code == 200:\n            report_file_urls = response.json()['urls']\n            logging.info('Found {} report file(s)'.format(len(report_file_urls)))\n            report_dfs = list(filter(\n                lambda df: not df.empty,\n                map(self._handle_report_file, report_file_urls))\n            )\n            # Concat DFs\n            result = pd.concat(report_dfs).reset_index().drop(columns=['index'])\n            return result\n        else:\n            logging.warning(response.text + '. Skipped it.')\n            return pd.DataFrame()\n\n    @staticmethod\n    def _handle_report_file(url: str):\n        try:\n            result = pd.read_csv(url, compression='gzip', dtype={\n                'advertising_id': str,\n                'ad_network': str,\n                'revenue': str\n            })  # Read report to DF\n            if result.empty:\n                logging.warning(f\"Not found data in report file url.\")\n            else:\n                logging.info(f\"Collected successful ad revenue report file url.\")\n            return result\n        except HTTPError as e:\n            logging.warning(f\"Can not read csv file from url cause: {e}\")\n            return pd.DataFrame()\n</code></pre>"},{"location":"api/#ironsource_report.ironsource_user_ad_revenue_reporting_api.AdRevenueMeasurements.__init__","title":"<code>__init__(api_credential, status_retries=STATUS_RETRIES, max_retries=5, retry_delay=1)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>api_credential</code> <code>dict</code> <p>API key(s) to use for the report</p> required <code>status_retries</code> <code>list[int]</code> <p>A set of HTTP status codes that we should force a retry on</p> <code>STATUS_RETRIES</code> <code>max_retries</code> <p>Total number of retries to allow</p> <code>5</code> <code>retry_delay</code> <p>Num of seconds sleep between attempts</p> <code>1</code> <p>Returns:</p> Type Description <p>None</p> Doc Author <p>mungvt@ikameglobal.com</p> Source code in <code>ironsource_report/ironsource_user_ad_revenue_reporting_api.py</code> <pre><code>def __init__(self, api_credential: dict,\n             status_retries: list[int] = STATUS_RETRIES,\n             max_retries=5, retry_delay=1):\n\"\"\"\n    Args:\n        api_credential: API key(s) to use for the report\n        status_retries: A set of HTTP status codes that we should force a retry on\n        max_retries: Total number of retries to allow\n        retry_delay: Num of seconds sleep between attempts\n\n    Returns:\n        None\n\n    Doc Author:\n        mungvt@ikameglobal.com\n    \"\"\"\n    super().__init__(api_credential=api_credential, status_retries=status_retries, max_retries=max_retries,\n                     retry_delay=retry_delay)\n</code></pre>"},{"location":"api/#ironsource_report.ironsource_user_ad_revenue_reporting_api.AdRevenueMeasurements.get_report","title":"<code>get_report(date=day_ago(1), app_key='', **kwargs)</code>","text":"<p>Retrieve a report from the ironSource Impression Level Revenue Server-Side API.</p> <p>Parameters:</p> Name Type Description Default <code>date</code> <code>str</code> <p>YYYY-MM-DD (UTC Timezone)</p> <code>day_ago(1)</code> <code>app_key</code> <code>str</code> <p>Application Key (as seen on our platform)</p> <code>''</code> <code>**kwargs</code> <p>Additional parameters to pass to the API</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame containing the report data.</p> Doc Author <p>mungvt@ikameglobal.com</p> Source code in <code>ironsource_report/ironsource_user_ad_revenue_reporting_api.py</code> <pre><code>def get_report(\n    self,\n    date: str = day_ago(1),\n    app_key: str = \"\",\n    **kwargs\n) -&gt; DataFrame:\n\"\"\"\n    Retrieve a report from the ironSource Impression Level Revenue Server-Side API.\n\n    Args:\n        date: YYYY-MM-DD (UTC Timezone)\n        app_key: Application Key (as seen on our platform)\n        **kwargs: Additional parameters to pass to the API\n\n    Returns:\n        A pandas DataFrame containing the report data.\n\n    Doc Author:\n        mungvt@ikameglobal.com\n    \"\"\"\n\n    params = {\n        \"appKey\": app_key,\n        \"date\": date,\n        **kwargs,\n    }\n\n    response = self.session.get(url=self.API_AD_REVENUE, params=params, headers=self._api_headers)\n    if response.status_code == 200:\n        report_file_urls = response.json()['urls']\n        logging.info('Found {} report file(s)'.format(len(report_file_urls)))\n        report_dfs = list(filter(\n            lambda df: not df.empty,\n            map(self._handle_report_file, report_file_urls))\n        )\n        # Concat DFs\n        result = pd.concat(report_dfs).reset_index().drop(columns=['index'])\n        return result\n    else:\n        logging.warning(response.text + '. Skipped it.')\n        return pd.DataFrame()\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install ironsource_report, run this command in your terminal:</p> <pre><code>pip install ironsource_report\n</code></pre> <p>This is the preferred method to install ironsource_report, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for ironsource_report can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/ikameglobal/ironsource_report\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/ikameglobal/ironsource_report/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>For more information about the API (params, columns), see the Reporting API.</p>"},{"location":"usage/#reporting-api","title":"Reporting API","text":""},{"location":"usage/#get-report","title":"Get report","text":"<pre><code>from ironsource_report import SampleClass\n\nreport = SampleClass(api_key=\"your_api_key\")\nresult = report.get_report()\nprint(result)\n</code></pre>"},{"location":"usage/#more-examples","title":"More examples","text":""}]}